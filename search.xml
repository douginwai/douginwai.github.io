<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>简单使用Laravel队列</title>
      <link href="/2019/07/31/laravel-queue/"/>
      <url>/2019/07/31/laravel-queue/</url>
      <content type="html"><![CDATA[<p>##需求<br>有一个需求需要将表格中的作品从oss服务器拉取下来，因为这个任务耗时较长，就想尝试一下laravel的异步队列的功能，用户请求拉取的时候，立即返回请求成功，拉取任务在服务器异步进行。</p><p>##配置环境<br>.env文件中设置QUEUE_CONNECTION=database，设置队列驱动，这里使用的框架是laravel 5.8，不同版本配置不同，本文使用database。</p><p>下面迁移jobs数据表，待执行的任务会记录在该表中。</p><pre><code>php artisan queue:tablephp artisan migrate</code></pre><p>##创建任务<br>    php artisan make:job DownloadPic<br>执行以上命令，会在app/jobs目录下生成一个队列的任务类，生成的类实现了 Illuminate\Contracts\Queue\ShouldQueue 接口，这意味着这个任务将会被推送到队列中，而不是同步执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Jobs;</span><br><span class="line"></span><br><span class="line">use Illuminate\Bus\Queueable;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Queue\InteractsWithQueue;</span><br><span class="line">use Illuminate\Contracts\Queue\ShouldQueue;</span><br><span class="line">use Illuminate\Foundation\Bus\Dispatchable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DownloadPic implements ShouldQueue</span><br><span class="line">&#123;</span><br><span class="line">    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;</span><br><span class="line"></span><br><span class="line">    private $list =[];    </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create a new job instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function __construct($list)</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">        $this-&gt;list = $list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute the job.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function handle()</span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">        foreach($this-&gt;list as $item)&#123;</span><br><span class="line">            //执行耗时的任务</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此任务类被调用默认执行handle()方法</p><p>##分发任务<br>新建一个Controller，将调用方法分配给一个路由，执行任务类的dispatch方法分发任务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public function download()</span><br><span class="line">&#123;</span><br><span class="line">    $list = StampDesign::get();</span><br><span class="line">    DownloadPic::dispatch($list);;</span><br><span class="line">    echo &apos;OK&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>##运行队列处理器<br>    php artisan queue:work<br>执行该命令，开始持续监听队列</p><p>##运行</p><p>访问download的路由，将下载任务推送到队列，队列处理器监听到队列的更新，将记录写在jobs表，执行队列任务，执行完成，删除jobs表中的已完成记录。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用easywechat开发小程序支付</title>
      <link href="/2019/01/16/easywechat-for-wechatpay/"/>
      <url>/2019/01/16/easywechat-for-wechatpay/</url>
      <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>一个认证小程序    </li><li>一个商户号</li></ol><p>需要以上2个账号，开发小程序支付需要的这两个账号  </p><p>一种流程是先申请小程序认证，通过认证后在小程序后台申请新的商户号，或者绑定现有商户号。</p><p>另外一种，先申请一个公众平台并且是服务号，必须服务号因为微信支付只支援服务号。服务号通过之后，左侧菜单栏有一个小程序管理模块，可以将服务号关联小程序，或者快速认证小程序。这里快速注册并认证小程序，可能就是使用服务号的认证资料，达到快速认证的效果。而且注册认证小程序和微信支付认证可以同步进行。对于需要公众号，小程序和商户号3个平台的，此流程会比较高效。</p><p><img src="/2019/01/16/easywechat-for-wechatpay/Image.png" alt="Example"></p><p>2个账号开通之后</p><p>需要获得以下参数</p><p>1.小程序的appid<br><br>2.小程序的appsecret<br><br>3.小程序的token<br><br>4.商户号merchant_id <br><br>5.商户号key (自定义的32位数字字母组合)<br></p><h3 id="开发代码"><a href="#开发代码" class="headerlink" title="开发代码"></a>开发代码</h3><p>根据项目需要，引入相应的EasyWechat版本，以下以EasyWechat 3.1为示例</p><p>引入EasyWechat之后，先配置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">protected function option()</span><br><span class="line">&#123;</span><br><span class="line">    return [</span><br><span class="line">        &apos;app_id&apos; =&gt; &apos;appid&apos;,                    //小程序APPid</span><br><span class="line">        &apos;secret&apos; =&gt; &apos;appsecret&apos;,                //小程序appsecret</span><br><span class="line">        &apos;payment&apos; =&gt; [</span><br><span class="line">            &apos;merchant_id&apos; =&gt; &apos;mechant_id&apos;,      //商户号  </span><br><span class="line">            &apos;key&apos; =&gt; &apos;key&apos;,                     //商户号key</span><br><span class="line">            &apos;notify_url&apos; =&gt; &apos;http://www.abc.com/notify&apos; //回调地址</span><br><span class="line">        ]</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支付代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public function pay()</span><br><span class="line">&#123;</span><br><span class="line">    $order_num = I(&apos;post.order_num&apos;, &apos;&apos;);</span><br><span class="line">    //根据订单号获取订单详情 $orderDetail</span><br><span class="line">    </span><br><span class="line">    $options = $this-&gt;option();//获取配置信息</span><br><span class="line">    $app = new \EasyWeChat\Foundation\Application($options);//使用配置信息创建app实例</span><br><span class="line">    $payment = $app-&gt;payment;</span><br><span class="line">    //支付体，填写支付信息</span><br><span class="line">    $attributes = [</span><br><span class="line">        &apos;openid&apos; =&gt; &apos;openid&apos;, //支付用户的openid</span><br><span class="line">        &apos;trade_type&apos; =&gt; &apos;JSAPI&apos;, //支付类型</span><br><span class="line">        &apos;body&apos; =&gt; &apos;iPhone X&apos;,</span><br><span class="line">        &apos;detail&apos; =&gt; &apos;iPhone X 金色 256G&apos;,</span><br><span class="line">        &apos;out_trade_no&apos; =&gt; $order_num,//支付的订单号，此号可与本地数据库订单号一致</span><br><span class="line">        &apos;total_fee&apos; =&gt; 100  //支付金额，单位分，1元即100</span><br><span class="line">    ];</span><br><span class="line">    $order = new Order($attributes); //根据填写信息创建订单</span><br><span class="line">    $result = $payment-&gt;prepare($order); //预支付，检验支付信息等是否合法</span><br><span class="line">    if ($result-&gt;return_code == &apos;SUCCESS&apos; &amp;&amp; $result-&gt;result_code == &apos;SUCCESS&apos;) &#123;</span><br><span class="line">        $prepayId = $result-&gt;prepay_id; //校验成功获得预支付id</span><br><span class="line">        $config = $payment-&gt;configForPayment($prepayId, false); //返回预支付结果，供前端调用支付</span><br><span class="line">        //支付成功后返回$config给前端</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调代码，回调接口是用户支付之后，由微信服务器通知支付结果的接口，这里返回的是xml格式的通知，开发者应该处理好通知结果，并及时反馈给微信服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public function notify()</span><br><span class="line">&#123;</span><br><span class="line">    $options = $this-&gt;option(); //获取配置信息</span><br><span class="line">    $app = new \EasyWeChat\Foundation\Application($options);</span><br><span class="line"></span><br><span class="line">    $response = $app-&gt;payment-&gt;handleNotify(function ($notify, $successful) &#123;</span><br><span class="line">        //这里由EasyWechat处理好xml格式通知后，将信息封装在$notify上</span><br><span class="line">        $order_num = $notify-&gt;out_trade_no; //获得支付时我们设定的交易订单号</span><br><span class="line"></span><br><span class="line">        // 下面是使用通知里的 &quot;微信支付订单号&quot; 或者 &quot;商户订单号&quot; 去自己的数据库找到订单 $orderDetail</span><br><span class="line"></span><br><span class="line">        if (!$orderDetail) &#123; // 如果订单不存在 或者 订单已经支付过了</span><br><span class="line">            return &quot;订单号：&#123;$order_num&#125; 订单不存在&quot;; // 告诉微信，我已经处理完了，订单没找到，别再通知我了</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果订单存在</span><br><span class="line">        // 检查订单是否已经更新过支付状态</span><br><span class="line">        if ($orderDetail[&apos;payment_status&apos;] == 1) &#123; // 假设订单字段“支付时间”不为空代表已经支付</span><br><span class="line">            return true; // 已经支付成功了就不再更新了</span><br><span class="line">        &#125;</span><br><span class="line">        // 用户是否支付成功</span><br><span class="line">        if ($successful) &#123;</span><br><span class="line">            // 此处 不是已经支付状态则修改为已经支付状态  更新支付时间为当前时间</span><br><span class="line">          </span><br><span class="line">        &#125; else &#123; // 用户支付失败</span><br><span class="line">        &#125;</span><br><span class="line">        return true; // 返回处理完成</span><br><span class="line">    &#125;);</span><br><span class="line">    $response-&gt;send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>first post</title>
      <link href="/2018/03/23/first-post/"/>
      <url>/2018/03/23/first-post/</url>
      <content type="html"><![CDATA[<p>first log</p><h1 id="welcome"><a href="#welcome" class="headerlink" title="welcome"></a>welcome</h1>]]></content>
      
      
        <tags>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
